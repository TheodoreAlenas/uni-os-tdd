cd build
make          # or 'make dev', for verbose
./rlr --help
./rlr         # ./rlr -c 2 [...]
ls output
make clean    # cleans the output/ too

1115 2019 00048 Theodoros (more at the bottom)



          - N POSIX semaphores

          - 2 POSIX shared memory segments

          - Writing requests end to start

          - An improvised priority-stack


     ____  ____   ___   ____ _____ ____ ____
    |  _ \|  _ \ / _ \ / ___| ____/ ___/ ___|
    | |_) | |_) | | | | |   |  _| \___ \___ \
    |  __/|  _ <| |_| | |___| |___ ___) |__) |
    |_|   |_| \_\\___/ \____|_____|____/____/


                Parent       Child
                ------------------
                init >
                          < I want
                ready >
                            < read
                ok >
                          < I want
                ready >
                            < read
                ok >
                       ...
                ok >
                        $


The child leaves its message at a specific part
of the segment, and notifies.

SNIPPET:child-shmem-offset

The parent cycles through the "rows" of the
children's segments, reading one message per
notification.

SNIPPET:parent-loop

The request is written back-to-front.
Before writing it, it is guaranteed that there was
a null character at position 0. That character
should be overriden last, because while the parent
does wait for a semaphore, he doesn't know the
source of the semaphore post, and he will pick up
the first child request he finds to be non-empty.

SNIPPET:back-to-front-writing

A request might also be an 'I read it' message.

SNIPPET:req-send-done

From the child's perspective:

SNIPPET:do-a-cycle


    ___  ____  ____ ___ _____ ___ _____ ____
   / _ \|  _ \|  _ \_ _|_   _|_ _| ____/ ___|
  | | | | | | | | | | |  | |  | ||  _| \___ \
  | |_| | |_| | |_| | |  | |  | || |___ ___) |
   \___/|____/|____/___| |_| |___|_____|____/


    WELL("");
    WELLL(printf("loop $%s", i));

are dev - only macros (make dev && ./rlr)

Naming:

    Parent            Child
    ---------------------------
    yes_please  = i_want
    youre_ready = thank_you

SHM_I_WANT, sem_thank_you, and so on.

'const' isn't used much because data eventually
reaches a standard function such as readline,
which doesn't declare any arguments constant. So
it feels awkward.

Plus I follow a retro style. The long names
aren't retro but the comments are old school and
the declarations are at the top.

There are tiny functions because I'm trying out
the "Uncle Bob" principles of clean coding.
I do rely on jump-to-definition functionality
(which breaks with conditional includes I have).
The main point is to be easy to skip reading code
one is not interested in.


         _____ _____ ____ _____ ____
        |_   _| ____/ ___|_   _/ ___|
          | | |  _| \___ \ | | \___ \
          | | | |___ ___) || |  ___) |
          |_| |_____|____/ |_| |____/


I tried out some test driven development.
It didn't go the best, honestly.

Some .c files aren't built when using 'make test'.

SNIPPET:testable-fork

SNIPPET:testable-files

Instead, the functions declared
in their header files are implemented elsewhere,
in the c/tests directory.

SNIPPET:fork-in-test

This makes them easy to test.

The tests aren't very sophisticated, they 'announce'
the situation. There's an 'announce' function. Also
they never deallocate.


    ____ _   _ ___ _     ____  ____  _____ _   _
   / ___| | | |_ _| |   |  _ \|  _ \| ____| \ | |
  | |   | |_| || || |   | | | | |_) |  _| |  \| |
  | |___|  _  || || |___| |_| |  _ <| |___| |\  |
   \____|_| |_|___|_____|____/|_| \_\_____|_| \_|


Children:
- wait for the parent to initialize the resources
- can't modify the shared memory segment for reading
- don't know the recipe for file names,
    semaphore names or shared memory segment names.

    child.c:

    Child *child_create(const ChildArgs *args);
    void do_a_cycle(const Child *child);

show the process.

One irony is they can modify each other's request.

Memory that was allocated before forking,
is deallocated.

Some combinations of parent-children crashes make
background processes go on, messing up next runs.
This is to be fixed, and I'll update this README.




Dimakopoulos Theodoros

1115 2019 00048
1115201900048
sdi1900048

sdi1900048@di.uoa.gr
dimakopt732@gmail.com

6939 75 16 42
