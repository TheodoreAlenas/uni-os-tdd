cd build
make          # or 'make dev', for verbose
./rlr --help
./rlr         # ./rlr -c 2 [...]
ls output
make clean    # cleans the output/ too

1115 2019 00048 Dimakopoulos Theodoros



    - N POSIX semaphores

    - 2 POSIX shared memory segments

    - An improvised priority-stack

    - rlr instances can run in parallel


     ____  ____   ___   ____ _____ ____ ____
    |  _ \|  _ \ / _ \ / ___| ____/ ___/ ___|
    | |_) | |_) | | | | |   |  _| \___ \___ \
    |  __/|  _ <| |_| | |___| |___ ___) |__) |
    |_|   |_| \_\\___/ \____|_____|____/____/


    Parent       Child
    ------------------
    init >
             < saw num
    nice >

              < I want
    ready >
                < read
    ok >
              < I want
    ready >
                < read
    ok >
           ...
    ok >
            $


The parent creates the resounces and counts the lines of the file. He won't
start the loop until all the children have read the total number of lines.

The child leaves its message at a specific part of the segment, and notifies.

     31 |   child->shmem_i_want = shmem_open_i_want(
     32 |       args->shmem_name_i_want,
     33 |       args->num_of_children) + args->id * MAX_REQUEST_LEN;
    [ file c/child/interface.c ]

The parent cycles through the "rows" of the children's segments, reading one
message per notification.

     32 |   _sem_wait(s->r->sem_yes_please);
     33 |
     34 |   s->child = copy_and_clear_req(msg_cycler, req_str);
     35 |
     36 |   if (req_says_got_it(req_str))
     37 |     handle_req_saying_got_it(s);
     38 |   else
     39 |     handle_req_saying_i_want(s, req_str);
    [ file c/parent/loop.c ]

The request is written back-to-front.

     95 |   for (i = MAX_REQUEST_LEN - 1; i >= 0; i--)
     96 |     child->shmem_i_want[i] = req_str[i];
    [ file c/child/loop.c ]

Before writing it, it is guaranteed that there was a null character at
position 0. That character should be overriden last, because while the parent
does wait for a semaphore, he doesn't know the source of the semaphore post,
and he will pick up the first child request he finds to be non-empty.

A request might also be an 'I read it' message.

     11 | void req_send_done(char *shm) {
     12 |   shm[1] = '\0';
     13 |   shm[0] = '$';
     14 | }
     15 |
     16 | int req_says_got_it(char *msg) {
     17 |   return msg[0] == '$';
     18 | }
    [ file c/both/req.c ]

When a request is about another file segment, it
is stacked, but with priority. It's called
'bubbling' in the code.

     53 |   x1->file_segment = 1;
     54 |   x2->file_segment = 2;
     55 |   x3->file_segment = 1;
     56 |   s = stack_create(3);
     57 |   stack_push(s, x1);
     58 |   stack_push(s, x2);
     59 |   stack_push(s, x3);
     60 |
     61 |   stack_pop(s, &y3);
     62 |   stack_pop(s, &y2);
     63 |   stack_pop(s, &y1);
     64 |   announce("test_stack_1_2_1_is_2_1_1",
     65 |       y1->file_segment == 2 &&
     66 |       y2->file_segment == 1 &&
     67 |       y3->file_segment == 1
     68 |       );
    [ file c/tests/stack.c ]

Then, multiple requests are popped and everyone
interested is notified once the segment changes.

    151 |   stack_for_all_of_segment(s->r->requests,
    152 |       update_readers_and_tell_child, &a);
    153 |   WELLL(stack_print_inline(s->r->requests));
    [ file c/parent/loop.c ]

From the child's perspective:

     29 | void do_a_cycle(const Child *child, int *prev_line) {
     30 |   char isolated_line[MAX_LINE_LEN];
     31 |   int err, i;
     32 |   SegmAndLine req;
     33 |   ThreeTimespecs time_data;
     34 |
     35 |   req = write_a_request(child, prev_line);
     36 |   post_and_wait(child, &time_data);
     37 |   err = !isolate_line(isolated_line,
     38 |       child->shmem_thank_you, req.line_in_segment);
     39 |   tell_you_got_the_message(child);
     40 |
     41 |   if (err)
     42 |     print_isolate_line_error(child, req);
     43 |   else
     44 |     record_and_wait(child, &time_data, req, isolated_line);
     45 | }
    [ file c/child/loop.c ]

     83 |   if (rand() % 8 == 0)
     84 |     line_in_file = rand() % child->lines_in_file;
     85 |   else
     86 |     line_in_file = little_offset(child, *prev_line);
    [ file c/child/loop.c ]


      ___  _   _ ___ ____  _  ______
     / _ \| | | |_ _|  _ \| |/ / ___|
    | | | | | | || || |_) | ' /\___ \
    | |_| | |_| || ||  _ <| . \ ___) |
     \__\_\\___/|___|_| \_\_|\_\____/


     12 | #define WELL(str) PRINT_PREFIX(); printf("%s\n", str)
     13 | #define WELLL(printf_expr) PRINT_PREFIX(); \
     14 |   printf_expr; printf("\n"); fflush(stdout)
    [ file c/both/dev_mode.h ]

     24 | dev: FLAGS = -DDEV
     25 | dev: $(RLR_MAIN_O) main.o
     26 | 	gcc $(RLR_MAIN_O) main.o -o rlr
    [ file build/Makefile ]

'const' isn't used for primitive types because data eventually reaches a
standard function such as readline, which doesn't declare any arguments
constant. So it feels awkward.

Plus I follow a retro style. The long names aren't retro but the declarations
are at the top.

Similarly I avoid unsigned types because they might come from the return value
of a function. Type conversions remove any guarantee unsigned types are
supposed to help with.

There are tiny functions because I'm trying out the "Uncle Bob" principles of
clean coding. The main point is to skip reading code easily. I do rely on
jump-to-definition functionality, though it does break with preprocessor
definitions.


     _____ _____ ____ _____ ____
    |_   _| ____/ ___|_   _/ ___|
      | | |  _| \___ \ | | \___ \
      | | | |___ ___) || |  ___) |
      |_| |_____|____/ |_| |____/


I tried out some test driven development. It didn't go the best but it was
entertaining.

Some .c files are different with  make test

     10 | #ifndef TEST
     11 |
     12 | int testable_fork() {
     13 |   return fork();
     14 | }
    [ file c/before/be_yourself.c ]

      8 | static int num_of_forks;
      9 |
     10 | int testable_fork() {
     11 |   num_of_forks++;
     12 |   return fork();
     13 | }
    [ file c/tests/fork.c ]

The specific example is from a test that was actually written after making the
forks work. There were bugs and any part of the code was suspicious, so I
thought to secure the forks.

The tests aren't very sophisticated, they 'announce' the situation. Also they
never deallocate.

     11 |   announce("errors_on_letter", -1 == req_parse("<2a,4>"));
     12 |   announce("parses_one_digit", 2 == req_parse("<2,4>"));
    [ file c/tests/req.c ]




Last update: Sun Dec 18 00:20:43 EET 2022
